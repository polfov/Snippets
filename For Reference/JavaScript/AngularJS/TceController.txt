(function () {
	angular.module(APPNAME)
		.controller('mainController', MainController);
	MainController.$inject = ['$scope', '$window', '$baseController', 'timecardEntryService', '$sce'];

	function MainController($scope, $window, $baseController, timecardEntryService, $sce) {
		// Administrative stuff
		var vm = this;
		var sortReverse = false;
		vm.$scope = $scope;
		// Simulate inheritance to add
		// $document, $log, $route, $routeParams, $systemEventService, $alertService, $sabio services
		// to our controller.
		$baseController.merge(vm, $baseController);
		vm.timecardEntryService = timecardEntryService;
		vm.$window = $window;

		// ViewModel
		vm.model = $scope.$parent.lVm.model;
		vm.goHome = _goHome;
		vm.items = [];
		vm.item = null;  // copy of item being edited
		vm.itemIndex = -1; // index of item being edited
		vm.filteredItems = [];
		vm.currentPage = 1;
		vm.itemsPerPage = 10;
		vm.totalItems = 0;
		vm.select = _select;
		vm.save = _save;
		vm.cancel = _cancel;
		vm.add = _add;
		vm.delete = _delete;
		vm.pageChanged = _pageChanged;
		vm.filter = _filter;
		vm.sort = _sort;

		//MinMax date settings for datepicker
		vm.optionsFrom = { format: 'LLL', showClear: true };
		vm.optionsTo = { format: 'LLL', showClear: true };
		vm.update = function (startDateTimeUtc, endDateTimeUtc) {
			vm.optionsFrom.maxDate = endDateTimeUtc;
			vm.optionsTo.minDate = startDateTimeUtc;
		};

		// "The fold"

		_render();

		function _render() {
			vm.timecardEntryService.search(vm.model.id, _getAllSuccess, _getAllError);
		}

		function _pageChanged() {
			var begin = ((vm.currentPage - 1) * vm.itemsPerPage);
			var end = begin + vm.itemsPerPage;
			vm.filteredItems = vm.items.slice(begin, end);
		}

		function _pageRefresh() {
			$window.location = ("/timecardentry/index")
		}

		function _goHome() {
			vm.$window.location.href = '/';
		}

		function _toLocalTime() {
			vm.item.startDateTimeLocal = vm.item.startDateTimeUtc.format()
			vm.item.endDateTimeLocal = vm.item.endDateTimeUtc.format()

			vm.item.startDateTimeUtc = vm.item.startDateTimeUtc.toISOString()
			vm.item.endDateTimeUtc = vm.item.endDateTimeUtc.toISOString()
		}

		function _hoursWorked(items) {
			for (var i = 0; i < items.length; i++) {
				a = moment(items[i].endDateTimeUtc).diff(moment(items[i].startDateTimeUtc))
				items[i].hoursWorked = moment.duration(a).asHours().toFixed(1)
			}
			return items
		}

		function _getAllSuccess(data) {
			vm.$scope.$apply(function () {
				if (data.items) {
					var items = _hoursWorked(data.items)
					vm.totalItems = data.items.length;
					vm.items = items;
					vm.filteredItems = vm.items.slice(0, vm.itemsPerPage);
				}
			});
		}

		function _filter(project) {
			if (project) {
				var projectId = project;
			}
			vm.timecardEntryService.search(projectId, _getAllSuccess, _getAllError)
		}

		function _sort(prop) {
			vm.items.sort(_generateSortFn(prop, sortReverse));
			_pageChanged()
			sortReverse = !sortReverse;
		}

		function _generateSortFn(prop, reverse) {
			if (reverse) {
				return function (a, b) {
					if (a[prop] < b[prop]) return -1;
					if (a[prop] > b[prop]) return 1;
					return 0;
				};
			} else {
				return function (a, b) {
					if (a[prop] < b[prop]) return 1;
					if (a[prop] > b[prop]) return -1;
					return 0;
				};
			}

		}

		function _getAllError(jqXHR) {
			vm.$alertService.error(jqXHR.responseText, "GetAll failed");
		}

		function _select(data) {
			// Keep track of the position in vm.items of
			// the item we will be editing
			vm.itemIndex = vm.items.indexOf(data);
			// get a fresh copy of the object to be edited from the database.
			vm.timecardEntryService.search(data.id, _getByIdSuccess, _getByIdError)
		}

		function _getByIdSuccess(data) {
			if (data.items && data.items.length > 0) {
				vm.$scope.$apply(function () {
					vm.item = data.items[0];
				});
			}
		}

		function _getByIdError(jqXHR) {
			vm.$alertService.error(jqXHR.responseText, "GetById failed");
		}

		// create a new empty item
		function _add() {
			vm.item = {};
			vm.itemIndex = -1;
		}

		function _cancel() {
			_endEdit();
		}

		function _endEdit() {
			vm.item = null;
			vm.itemIndex = -1;
		}

		//Save Functions
		function _save() {
			_toLocalTime()
			vm.item.PersonId = vm.model.id;
			vm.item.timecardStatusId = 1;
			if (vm.item.id) {
				vm.timecardEntryService.put(vm.item.id, vm.item, _putSuccess, _putError);
			}
			else {
				vm.item.timecardStatusId = 1
				vm.timecardEntryService.post(vm.item, _postSuccess, _postError);
			}
		}

		function _putSuccess(data) {
			vm.$scope.$apply(function () {
				// To update UI, replace with new version
				vm.items[vm.itemIndex] = vm.item;
				_pageRefresh();
			});
		}

		function _putError(jqXHR) {
			vm.$alertService.error(jqXHR.responseText, "Update failed");
		}

		function _postSuccess(data) {
			if (data.item) {
				vm.$scope.$apply(function () {
					_pageRefresh()
				});
			}
		}

		function _postError(jqXHR) {
			vm.$alertService.error(jqXHR.responseText, "Insert failed");
		}

		//Delete Functions
		function _delete(item) {
			if (item.id) {
				sabio.ui.sweetalert.delete(item.id, vm.timecardEntryService.delete, _deleteSuccess, _deleteError)
			}
		}

		function _deleteSuccess(data) {
			vm.$scope.$apply(function () {
				// To update UI, replace with new version
				vm.items.splice(vm.itemIndex, 1);
				_render();
			});
		}

		function _deleteError(jqXHR) {
			vm.$alertService.error(jqXHR.responseText, "Delete failed");
		}
	}
})();


